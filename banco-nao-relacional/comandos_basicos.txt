MongoDB
    - Trabala com DOCUMENTOS no formato JSON

Comandos basicos: 
* show dbs -> apresenta todos os databases criados
* db.createCollection() -> criar uma collection ondem pode ser armazenados documentos
* show collections -> apresenta todas as collections de um db
* db."nome_collection".drop() -> exclui uma collection
* db.estados.insert({nome:"Acre", sigla:"AC", regiao: "Norte"}) , 
* db.estados.save({nome:"Alagoas", sigla:"AL", regiao:"Nordeste", populacao:33322000})  -> inserção de dado 
    - Documento no formata JSON
    - Documentos podem ter qunatidade diferentes de informações
* db.estados.find() -> apresenta os documentos de uma collection
* db.estados.find.pretty() -> apresenta os documentos de uma collection na formatação JSON
* db.help() -> mostra os comandos possiveis do MongoDB

INSERT COM SUBDOCUMENTOS
db.estados.insert({
    nome: "São Paulo",
    sigla: "SP",
    regiao: "Sudeste",
    cidades: [{
        _id: ObjectId(),
        nome: "Campinas",
        area: 795.7,
        prefeito: "Jonas Donizette",
        populacao: 1081000
    },
    {
        _id: ObjectId(),
        nome: "Guarulhos",
        populacao: 1325000
    },
    {
        _id: ObjectId(),
        nome: "Sorocaba",
        distanciaCapital: 87,
        populacao: 644919
    }
})

Comandos de Consulta: 
* db.estados.findOne() -> retorna o primeiro documento
* db.estados.find({sigla: "RJ"}) -> find() parametrizado no caso procurando documento(s) que contem a sigla = RJ
* db.estados.find({$or: [{sigla: "RJ", sigla: "AC"}]}) -> find() parametrizado e com operado lógico "ou"($or)
* db.estados.find({populacao: {$exists: true}}) 
    -> find() buscando todos os documentos dentro da collection que "contém" o atributo "populacao" - operador lógico $exists    
* db.estados.find().limit() -> consulta com paginação - limit vai retorna a quantidade da de documentos pedidos na consulta
* db.estados.count() -> quantidade de documentos 
* db.estados.find({sigla: "SP"}, {nome: 1, sigla: 1}) -> consulta com filtro de informações que deseja receber 

AGREGAÇÃO: 
* db.estados.aggregate([
    {$project:  {nome: 1, "cidades.nome":1, _id: 0}}
])
* db.estados.aggregate([
    {$project: {populacao: {$sum: "$cidades.populacao"}}},
    {$group: {_id: null, populacaoTotal: {$sum: "$populacao"}}},
    {$project: {_id: 0, populacaoTotal: 1}}
])
* db.estados.aggregate([
    {$match: {"cidades.nome": "Sorocaba"}},
    {$unwind: "$cidades"},
    {$match: {"cidades.nome":"Sorocaba"}},
    {$project: {_id: 0, "cidades.nome": 1}}
]).pretty()

UPDATE
* db.estados.update({sigla:"SP"}, {$set: {populacao:45340000}}) -> definir um novo atributo ou atualizar um existente
* db.estados.update({sigla:"AL"}, {$set: {cidades:[{nome:"Sergipe"}]}}) -> definir um novo atributo ou atualizar um existente
* db.estados.update({sigla:"RJ"}, {$unset: {"populacao": 1, "populacao_estados":1}, multi: true}) -> retirar um atributo do documento
* db.estados.update({sigla:"SP"}, {$push: {cidades: {nome: "Santos", populacao: 433966}}}) -> adicionar um novo objeto ao registro

REMOVE
* db.estados.remove({sigla:"AC"})
* db.estados.remove({populacao: {$exists: true}}, 1) -> excluir apenas um registro
* db.estados.remove({populacao: {$lt: 20000000}}) -> remover todos os registros que tem a população "menor que"($lt) 20000000

LOOKUP
* db.empresas.aggregate([
    {$match: {nome: "Bradesco"}},
    {$lookup: {
        from: "estados", 
        localField: "estadoId",
        foreignField: "_id",
        as: "estado"
    }},
    {$unwind: "$estado"}
]).pretty()

* db.empresas.aggregate([
    {$match: {nome: "Vale"}},
    {$lookup: {
        from: "estados", 
        localField: "cidadeId",
        foreignField: "cidades._id",
        as: "estado"
    }},
    {$unwind: "$estado"},
    {$unwind: "$estado.cidades"},
    {$addFields: {mesmaCidade: {$cmp: ["$estado.cidades._id", "$cidadeId"]}}},
    {$match: {mesmaCidade: 0}}
]).pretty()

{$match: {"estado.cidades._id": "$cidadeId"}}